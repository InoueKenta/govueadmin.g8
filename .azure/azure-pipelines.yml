# Azure pipeline to build & deploy GoVueAdmin demo site
# https://docs.microsoft.com/azure/devops/pipelines/

trigger:
  batch: true
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  goVersion: '1.13'                     # second latest major.minor version
  GOBIN: '$(GOROOT)/bin'
  GO111MODULE: 'on'
  goBuiltAppName: 'main'
  nodejsVersion: '12.x'                 # latest LTS version
  dockerVersion: '19.03.12'             # latest major.minor version
  herokuRegistry: 'registry.heroku.com'
  herokuApp: 'demo-govueadmin'
  branchMasterChanged: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  sessionDirectory: $(System.DefaultWorkingDirectory)/..
  projectName: 'govueadmin-seed'
  projectDirectory: $(sessionDirectory)/$(projectName)

stages:
- stage: build
  displayName: Build project
  jobs:
  - job: build
    displayName: Build project
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - task: NodeTool@0
      displayName: Prepare NodeJs env
      inputs:
        versionSpec: '$(nodejsVersion)'
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        g8 --version
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: Npm@1
      displayName: 'FE: npm install'
      inputs:
        command: install
        workingDir: '$(projectDirectory)/fe-gui'
    - task: Npm@1
      displayName: 'FE: npm run build'
      inputs:
        command: custom
        customCommand: 'run build'
        workingDir: '$(projectDirectory)/fe-gui'
    - script: cd $(projectDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
      displayName: 'BE: go build'

- stage: test
  displayName: Run tests
  dependsOn: build
  jobs:
  - job: test_azure_cosmosdb
    displayName: Run tests against Azure Cosmos DB
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --rm --name cosmosdb -p 8081:8081 -p 10251:10251 -p 10252:10252 -p 10253:10253 -p 10254:10254 -e AZURE_COSMOS_EMULATOR_PARTITION_COUNT=4 -e AZURE_COSMOS_EMULATOR_ENABLE_DATA_PERSISTENCE=false mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator
        sleep 60
        export COSMOSDB_DRIVER="gocosmos"
        export COSMOSDB_URL="AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==;Db=gva;InsecureSkipVerify=true"
        cd $(projectDirectory)/be-api \
          && go test -p 1 -v -cover -coverprofile=coverage.txt -count 1 ./src/gvabe/bov2/user ./src/gvabe/bov2/blog \
          && bash <(curl -s https://codecov.io/bash) -cF cosmosdb
      displayName: 'BE: Run tests against Azure Cosmos DB'    
  - job: test_aws_dynamodb
    displayName: Run tests against AWS DynamoDB
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
        sleep 5
        export AWS_REGION="us-west-2"
        export AWS_ACCESS_KEY_ID="DUMMY"
        export AWS_SECRET_ACCESS_KEY="DUMMY"
        export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
        cd $(projectDirectory)/be-api \
          && go test -p 1 -v -cover -coverprofile=coverage.txt -count 1 ./src/gvabe/bov2/user ./src/gvabe/bov2/blog \
          && bash <(curl -s https://codecov.io/bash) -cF dynamodb
      displayName: 'BE: Run tests against AWS DynamoDB'    
  - job: test_pgsql
    displayName: Run tests against PostgreSQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        docker run -d --rm --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
        sleep 5
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=gva"
        cd $(projectDirectory)/be-api \
          && go test -p 1 -v -cover -coverprofile=coverage.txt -count 1 ./src/gvabe/bov2/user ./src/gvabe/bov2/blog \
          && bash <(curl -s https://codecov.io/bash) -cF pgsql
      displayName: 'BE: Run tests against PostgreSQL'    
  - job: test_sqlite
    displayName: Run tests against SQLite
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        export PWD=$(pwd)
        mkdir $PWD/temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="$PWD/temp/temp.db"
        cd $(projectDirectory)/be-api \
          && go test -p 1 -v -cover -coverprofile=coverage.txt -count 1 ./src/gvabe/bov2/user ./src/gvabe/bov2/blog \
          && bash <(curl -s https://codecov.io/bash) -cF sqlite
      displayName: 'BE: Run tests against SQLite'    

- stage: deploy_heroku
  displayName: Build image and deploy to Heroku
  dependsOn: test
  condition: and(succeeded(), eq(variables['branchMasterChanged'], false))
  variables:
  - group: Release
  jobs:
  - job: build_deploy
    displayName: Build image and deploy
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
      displayName: Install go-giter8
    - script: |
        g8 --version
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project from g8 template
      workingDirectory: $(sessionDirectory)
    - task: DockerInstaller@0
      displayName: Prepare Docker CLI
      inputs:
        dockerVersion: '$(dockerVersion)'
        releaseType: 'stable'
    - script: |
        APP_SHORTNAME=`jq -r '.shortname' $(projectDirectory)/appinfo.json`
        echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
        APP_VERSION=`jq -r '.version' $(projectDirectory)/appinfo.json`
        BUILD_DATE=`date '+%Y%m%d'`
        APP_VERSION=${APP_VERSION}-b${BUILD_DATE}.$(Build.BuildId)
        echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
        appInfo=`jq ".version=\"$APP_VERSION\"" $(projectDirectory)/appinfo.json`
        echo $appInfo > $(projectDirectory)/appinfo.json
        sed -i 's/{?HTTP_LISTEN_PORT}/{?PORT}/g' $(projectDirectory)/be-api/config/api.conf
        sed -i 's/{?DB_PGSQL_URL}/{?DATABASE_URL}/g' $(projectDirectory)/be-api/config/conf.d/api_gvabe.conf
      displayName: Init application info
    - task: Docker@2
      displayName: Build Docker image
      inputs:
        command: build
        buildContext: '$(projectDirectory)'
        repository: '$(APP_SHORTNAME)'
        dockerFile: '$(projectDirectory)/Dockerfile'
        tags: latest
    - script: |
        echo Logging in to $(herokuRegistry)...
        export HEROKU_API_KEY=$(HEROKU_TOKEN)
        echo $(HEROKU_TOKEN) | docker login -u _ --password-stdin $(herokuRegistry)
        docker tag $(APP_SHORTNAME) $(herokuRegistry)/$(herokuApp)/web
        docker images
        echo Pushing image...
        docker push $(herokuRegistry)/$(herokuApp)/web
        echo Releasing image...
        heroku container:release web -a $(herokuApp)
        echo Logging out...
        docker logout $(herokuRegistry)
        unset HEROKU_API_KEY
      displayName: Push and Deploy to Heroku
