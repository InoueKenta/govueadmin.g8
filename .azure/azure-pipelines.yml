# Azure pipeline to build & deploy GoVueAdmin demo site
# https://docs.microsoft.com/azure/devops/pipelines/

trigger:
  batch: true
  branches:
    include:
    - '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: goVersion
    value: '1.17'
  - name: gogiter8Version
    value: '0.5.1'
  - name: dockerVersion
    value: '19.03.12'
  - name: nodejsVersion
    value: '12.x'
  - name: GOBIN
    value: $(GOROOT)/bin
  - name: GO111MODULE
    value: 'on'
  - name: goBuiltAppName
    value: govueadmin
  - name: sessionDirectory
    value: $(System.DefaultWorkingDirectory)/..
  - name: projectName
    value: govueadmincp-seed
  - name: projectDirectory
    value: $(sessionDirectory)/$(projectName)
  - name: branchMasterChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/master') }}
  - name: branchDemoBuildChanged
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/demo-build') }}
  - name: dockerHubRepoName
    value: govueadmin-demo
  - name: govueadminVersion
    value: '0.4.0'
  - name: goTestPath
    value: './src/gvabe/bov2/user ./src/gvabe/bov2/blog'
  - group: Release # merge with ADO env group named 'Release'

stages:
- stage: generate_and_build
  displayName: Generate and Build project
  jobs:
  - job: generate_and_build
    displayName: Generate project and build
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - task: Go@0
      inputs:
        # minimum go-giter8 v0.5.1 for "quiet" mode
        command: 'get'
        arguments: 'github.com/btnguyen2k/go-giter8/g8@v$(gogiter8Version)'
      displayName: Install go-giter8
    - script: |
        g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
      displayName: Generate project using go-giter8
      workingDirectory: $(sessionDirectory)
    - task: NodeTool@0
      displayName: Prepare NodeJs env
      inputs:
        versionSpec: '$(nodejsVersion)'
    - task: Npm@1
      displayName: 'FE: npm install'
      inputs:
        command: install
        workingDir: '$(projectDirectory)/fe-gui'
    - task: Npm@1
      displayName: 'FE: npm run build'
      inputs:
        command: custom
        customCommand: 'run build'
        workingDir: '$(projectDirectory)/fe-gui'
    - script: cd $(projectDirectory)/be-api && go build -o $(goBuiltAppName) -tags netgo -a
      displayName: 'BE: go build'

- stage: test
  displayName: Run tests
  dependsOn: generate_and_build
  jobs:
  - job: test_sqlite
    displayName: Run tests against SQLite
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        export PWD=$(pwd)
        mkdir -p $PWD/temp
        export SQLITE_DRIVER="sqlite3"
        export SQLITE_URL="$PWD/temp/temp.db"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against SQLite
  - job: test_pgsql
    displayName: Run tests against PostgreSQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name postgres -e POSTGRES_DB=test -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -p 5432:5432 postgres:11
        sleep 5
      displayName: Start PostgreSQL server
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export PGSQL_DRIVER="pgx"
        export PGSQL_URL="postgres://test:test@localhost:5432/test?sslmode=disable&client_encoding=UTF-8&application_name=goadmin"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against PostgreSQL
  - job: test_mysql
    displayName: Run tests against MySQL
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mysql -e MYSQL_ROOT_PASSWORD=test -e MYSQL_DATABASE=test -e MYSQL_USER=test -e MYSQL_PASSWORD=test -p 3306:3306 mysql:8
        sleep 5
      displayName: Start MySQL server
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=true&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against MySQL (parseTime=true)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MYSQL_DRIVER="mysql"
        export MYSQL_URL="test:test@tcp(localhost:3306)/test?charset=utf8mb4,utf8&parseTime=false&loc=\${loc}"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against MySQL (parseTime=false)
  - job: test_mongo_standlone
    displayName: Run tests against MongoDB (standalone)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mongodb -e MONGO_INITDB_ROOT_USERNAME=test -e MONGO_INITDB_ROOT_PASSWORD=test -e MONGO_INITDB_DATABASE=test -p 27017:27017 mongo:4.2
        sleep 5
      displayName: Start MongoDB server (standalone)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MONGO_DB="test"
        export MONGO_URL="mongodb://test:test@localhost:27017/?authSource=admin"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against MongoDB (standalone)
  - job: test_mongo_replicaset
    displayName: Run tests against MongoDB (replicaset)
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name mongodb-replset -e MONGODB_REPLICA_SET_MODE=primary -e MONGODB_REPLICA_SET_KEY=myreplset -e MONGODB_ADVERTISED_HOSTNAME=localhost -e MONGODB_PRIMARY_PORT_NUMBER=27017 -e MONGODB_ROOT_PASSWORD=test -e MONGODB_DATABASE=test -p 27017:27017 bitnami/mongodb:4.2
        sleep 5
      displayName: Start MongoDB server (replicaset)
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export MONGO_DB="test"
        export MONGO_URL="mongodb://root:test@localhost:27017/?authSource=admin&replicaSet=replicaset"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against MongoDB (replicaset)
  - job: test_aws_dynamodb
    displayName: Run tests against AWS DynamoDB
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        docker run -d --rm --name dynamodb -p 8000:8000 amazon/dynamodb-local -jar DynamoDBLocal.jar -inMemory -sharedDb
        sleep 5
      displayName: Start PostgreSQL server
    - script: |
        export TIMEZONE="Asia/Ho_Chi_Minh"
        export AWS_REGION="us-west-2"
        export AWS_ACCESS_KEY_ID="DUMMY"
        export AWS_SECRET_ACCESS_KEY="DUMMY"
        export AWS_DYNAMODB_ENDPOINT="http://localhost:8000"
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api && go test -v -p 1 -count 1 $(goTestPath)
      displayName: Run tests against AWS DynamoDB
  - job: test_azure_cosmosdb
    displayName: Run tests against Azure Cosmos DB
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: GoTool@0
      displayName: Prepare Go env
      inputs:
        version: '$(goVersion)'
    - script: |
        REM "Azure CosmosDb Emulator will be installed to C:\Program Files\Azure Cosmos DB Emulator\"
        REM choco install -y azure-cosmosdb-emulator
        powershell "& \"C:\Program Files\Azure Cosmos DB Emulator\Microsoft.Azure.Cosmos.Emulator.exe\""
        powershell -command start-Sleep -s 90
        powershell try { Invoke-RestMethod -Method GET https://127.0.0.1:8081/ } catch {}
        powershell netstat -nt
        set COSMOSDB_DRIVER='gocosmos'
        set COSMOSDB_URL='AccountEndpoint=https://localhost:8081/;AccountKey=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==;InsecureSkipVerify=true'
        set TIMEZONE='Asia/Ho_Chi_Minh'
        cd $(System.DefaultWorkingDirectory)/src/main/g8/be-api
        go test -v -p 1 -count 1 $(goTestPath)
        REM go test -p 1 -v -cover -coverprofile=coverage.txt -count 1 ./src/gvabe/bov2/user ./src/gvabe/bov2/blog
      displayName: Run tests against Azure Cosmos DB


# - stage: deploy_heroku
#   displayName: Build image and deploy to Heroku
#   dependsOn: test
#   condition: and(succeeded(), eq(variables['branchMasterChanged'], false))
#   variables:
#   - group: Release
#   jobs:
#   - job: build_deploy
#     displayName: Build image and deploy
#     steps:
#     - task: GoTool@0
#       displayName: Prepare Go env
#       inputs:
#         version: '$(goVersion)'
#     - task: Go@0
#       inputs:
#         command: 'get'
#         arguments: 'github.com/btnguyen2k/go-giter8/g8@v0.5.1'
#       displayName: Install go-giter8
#     - script: |
#         g8 --version
#         g8 new --no-inputs file://$(System.DefaultWorkingDirectory)
#       displayName: Generate project from g8 template
#       workingDirectory: $(sessionDirectory)
#     - task: DockerInstaller@0
#       displayName: Prepare Docker CLI
#       inputs:
#         dockerVersion: '$(dockerVersion)'
#         releaseType: 'stable'
#     - script: |
#         APP_SHORTNAME=`jq -r '.shortname' $(projectDirectory)/appinfo.json`
#         echo '##vso[task.setvariable variable=APP_SHORTNAME]'$APP_SHORTNAME
#         APP_VERSION=`jq -r '.version' $(projectDirectory)/appinfo.json`
#         BUILD_DATE=`date '+%Y%m%d'`
#         APP_VERSION=${APP_VERSION}-b${BUILD_DATE}.$(Build.BuildId)
#         echo '##vso[task.setvariable variable=APP_VERSION]'$APP_VERSION
#         appInfo=`jq ".version=\"$APP_VERSION\"" $(projectDirectory)/appinfo.json`
#         echo $appInfo > $(projectDirectory)/appinfo.json
#         sed -i 's/{?HTTP_LISTEN_PORT}/{?PORT}/g' $(projectDirectory)/be-api/config/api.conf
#         sed -i 's/{?DB_PGSQL_URL}/{?DATABASE_URL}/g' $(projectDirectory)/be-api/config/conf.d/api_gvabe.conf
#       displayName: Init application info
#     - task: Docker@2
#       displayName: Build Docker image
#       inputs:
#         command: build
#         buildContext: '$(projectDirectory)'
#         repository: '$(APP_SHORTNAME)'
#         dockerFile: '$(projectDirectory)/Dockerfile'
#         tags: latest
#     - script: |
#         echo Logging in to $(herokuRegistry)...
#         export HEROKU_API_KEY=$(HEROKU_TOKEN)
#         echo $(HEROKU_TOKEN) | docker login -u _ --password-stdin $(herokuRegistry)
#         docker tag $(APP_SHORTNAME) $(herokuRegistry)/$(herokuApp)/web
#         docker images
#         echo Pushing image...
#         docker push $(herokuRegistry)/$(herokuApp)/web
#         echo Releasing image...
#         heroku container:release web -a $(herokuApp)
#         echo Logging out...
#         docker logout $(herokuRegistry)
#         unset HEROKU_API_KEY
#       displayName: Push and Deploy to Heroku
